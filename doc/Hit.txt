-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Hit - Haskell Git. Simple implementation of some basic Git commands in
--   haskell. Please see the README on Github at
--   <a>https://github.com/bakala12/Hit#readme</a>
@package Hit
@version 0.1.0.0


-- | A module that provides file compression methods used in Hit
module Hit.Common.Compression

-- | Compresses a given <a>String</a>
compressContent :: String -> ByteString

-- | Returns decompressed version of the given <a>ByteString</a>
decompressContent :: ByteString -> String


-- | This is a module that defines base types and aliases.
module Hit.Common.Data

-- | Represents <a>ExceptT</a> transfromer with <a>IO</a> monad inside it
type ExIO a = ExceptT String IO a

-- | Represents a hash used by Hit
type Hash = String

-- | Represents Hit file permissions
type HitPermissions = String

-- | Represents Hit timestamp
type HitTimestamp = String

-- | Represents Hit branch
type Branch = String

-- | Represents Hit commit message
type CommitMessage = String

-- | Represents email address
type Email = String


-- | A module that defines Hit commands available in system
module Hit.Commands.Data

-- | Represents a Hit command type
data HitCommandType

-- | Represents <a>InitCommand</a> (hit init)
InitCommandType :: HitCommandType

-- | Represents <a>CommitCommand</a> (hit commit)
CommitCommandType :: HitCommandType

-- | Represents <a>StatusCommand</a> (hit status)
StatusCommandType :: HitCommandType

-- | Represents <a>NewBranchCommand</a> (hit newbranch)
NewBranchCommandType :: HitCommandType

-- | Represents <a>RemoveBranchCommand</a> (hit removebranch)
RemoveBranchCommandType :: HitCommandType

-- | Represents <a>CheckoutBranchCommand</a> (hit checkout)
CheckoutBranchCommandType :: HitCommandType

-- | Represents <a>SetConfigCommand</a> (hit setconfig)
SetConfigCommandType :: HitCommandType

-- | Represents <a>ListBranchCommand</a> (hit listbranch)
ListBranchCommandType :: HitCommandType

-- | Represents <a>GetConfigCommand</a> (hit getconfig)
GetConfigCommandType :: HitCommandType

-- | Represents <a>ListCommandsCommand</a> (hit listcommands)
ListCommandsCommandType :: HitCommandType

-- | Represents <a>HelpCommand</a> (hit help)
HelpCommandType :: HitCommandType

-- | Represents <a>LogCommand</a> (hit log)
LogCommandType :: HitCommandType

-- | Represents <a>CurrentFileDiffCommand</a> (hit diff)
CurrentFileDiffCommandType :: HitCommandType

-- | Represents <a>CommittedFileDiffCommand</a> (hit diffc)
CommittedFileDiffCommandType :: HitCommandType

-- | Represents <a>MergeCommand</a> (hit merge)
MergeCommandType :: HitCommandType

-- | Represents <a>ResetFileCommand</a> (hit reset)
ResetFileCommandType :: HitCommandType

-- | Represents <a>ResetAllCommand</a> (hit resetall)
ResetAllCommandType :: HitCommandType

-- | Represents <a>CheckoutCommitCommand</a> (hit checkoutc)
CheckoutCommitCommandType :: HitCommandType

-- | Represents <a>InvalidCommand</a>
InvalidCommandType :: HitCommandType

-- | A dictionary mapping kayword to <a>HitCommandType</a>
keywordToCommandTypeMap :: Map String HitCommandType

-- | Converts <a>String</a> to <a>HitCommandType</a>
readCommandType :: String -> HitCommandType

-- | Represents a Hit command
data HitCommand

-- | hit init - Initializes empty Hit repository
InitCommand :: HitCommand

-- | hit commit - Commits the working directory state
CommitCommand :: CommitMessage -> HitCommand

-- | hit status - Gets the status of repository, in particular list of
--   changes made in working directory
StatusCommand :: HitCommand

-- | hit newbranch - Creates a new branch
NewBranchCommand :: Branch -> HitCommand

-- | hit removebranch - Removes existing branch
RemoveBranchCommand :: Branch -> HitCommand

-- | hit checkout - Checkout to an existing branch
CheckoutBranchCommand :: Branch -> HitCommand

-- | hit setconfig - Saves given key and value in .hitconfig file
SetConfigCommand :: String -> String -> HitCommand

-- | hit listbranch - Lists existing branches
ListBranchCommand :: HitCommand

-- | hit getconfig - Gets value from .hitconfig file saved at given key
GetConfigCommand :: String -> HitCommand

-- | hit listcommands - Lists all available commands
ListCommandsCommand :: HitCommand

-- | hit help - Displays help page for given command
HelpCommand :: String -> HitCommand

-- | hit log - Get a given number of commits from history
LogCommand :: Int -> HitCommand

-- | hit diff - Lists changes made to the given file from last commit
CurrentFileDiffCommand :: FilePath -> HitCommand

-- | hit diffc - Compares version of the same file in two commits
CommittedFileDiffCommand :: FilePath -> Hash -> Hash -> HitCommand

-- | hit merge - Merges the given branch into a current one
MergeCommand :: Branch -> HitCommand

-- | hit reset - Resets changes made to a file in a working directory
ResetFileCommand :: FilePath -> HitCommand

-- | hit resetall - Resets all changes made in working directory
ResetAllCommand :: HitCommand

-- | hit checkoutc - Checkout to the given commit (puts repository in
--   detached head mode)
CheckoutCommitCommand :: Hash -> HitCommand

-- | Invalid command
InvalidCommand :: HitCommand

-- | A dictionary mapping parameter name to its describtion
parameterDefinitions :: Map String String

-- | Gets a list of parameter name for the given <a>HitCommandType</a>
getParametersForCommand :: HitCommandType -> [String]

-- | A dictionary mapping keyword to <a>HitCommand</a> describtion
commandDescribtions :: Map String String
instance GHC.Show.Show Hit.Commands.Data.HitCommand
instance GHC.Show.Show Hit.Commands.Data.HitCommandType


-- | A module that allows parsing Hit commands
module Hit.Commands.Parser

-- | Parses the given input <a>String</a> and converts it to
--   <a>HitCommand</a> instance
parseHitCommand :: String -> ExIO HitCommand


-- | A module that supports getting help for command
module Hit.Commands.Help

-- | Gets help <a>String</a> for a given keyword
getHelpForKeyWord :: String -> String

-- | Gets list of avaliable commands as <a>String</a>
getAvailableCommands :: String


-- | A module that provides some operation on files within <a>ExIO</a>
--   monad.
module Hit.Common.File

-- | Executes the given <a>IO</a> operation and returns its result or error
--   in <a>ExIO</a> monad
secureFileOperation :: IO a -> ExIO a

-- | Creates a new empty directory on a given path
createEmptyDirectory :: FilePath -> ExIO ()

-- | Creates new file
createNewFile :: FilePath -> String -> String -> ExIO ()

-- | Creates a directory if it does not exist
createDirectoryIfNotExist :: FilePath -> ExIO ()

-- | Reads whole file. This uses strict <a>IO</a>
readWholeFile :: FilePath -> ExIO String

-- | Writes a content to a file
writeWholeFile :: FilePath -> String -> ExIO ()

-- | Checks if a given path indicates a directory
isDirectory :: FilePath -> ExIO Bool

-- | Gets directory contents
getDirectoryEntries :: FilePath -> ExIO [String]

-- | Checks if file exist
isExistingFile :: FilePath -> ExIO Bool

-- | Removes the given file
removeExistingFile :: FilePath -> ExIO ()

-- | Removes common part of first path from the second one and return
--   splitted rest of second path
splitAndGetRest :: FilePath -> FilePath -> [FilePath]

-- | Creates a file (if parent directories do not exist it also creates
--   them)
createFileWithParentDirectories :: FilePath -> String -> ExIO ()

-- | Removes the directory if it is empty
removeIfEmptyDirectory :: FilePath -> ExIO Bool


-- | A module that provides methods used for calculating hashes by Hit.
module Hit.Common.Hash

-- | Calculates 40 characters SHA1 hash for a given <a>String</a>
calculateHash :: String -> Hash

-- | Packs the given 40 charaters SHA1 hash to 20 bytes and return it as
--   <a>String</a>
packHash :: Hash -> String

-- | Gets the packed 20 bytes <a>String</a> and returns 40 charaters hash
--   associated with it. This is reverse operation to packHash
unpackHash :: String -> String


-- | A module that provides some additional and useful operations on lists.
module Hit.Common.List

-- | A concatMap version that operates on external monad
concatMapM :: (Monad m) => (a -> m [b]) -> [a] -> m [b]

-- | Returns the first element from the list that satisfies a given
--   predicate or <a>Nothing</a> if there is no such element
findFirstMatching :: (a -> Bool) -> [a] -> Maybe a

-- | Returns the only element from the list that satisfies a given
--   predicate or <a>Nothing</a> if there is no such element
findOnlyMatching :: (a -> Bool) -> [a] -> Maybe a

-- | Skips a given number of elements and return the rest of the list
skip :: Int -> [a] -> [a]


-- | A module that provides a function that gives file permissions for Hit.
module Hit.Common.Permissions

-- | Returns permissions for a given argument path to file or directory.
--   Allowed permissions are: 040000 for directories, 100755 for executable
--   files, 100644 for normal files
getHitPermissions :: FilePath -> ExIO HitPermissions


-- | A module that provides some basic paths to important Hit files and
--   directories
module Hit.Common.Repository

-- | Gets path to main repository directory. This is a current directory
getRepositoryDirectory :: ExIO FilePath

-- | Sets path to main repository directory. This is current directory
setRepositoryDirectory :: FilePath -> ExIO ()

-- | Gets path to special .hit directory where all Hit information are
--   stored
getHitDirectoryPath :: ExIO FilePath

-- | Gets path to directory where Hit objects are stored
getPathToObjects :: ExIO FilePath

-- | Gets path to Merge file.
getPathToMergeFile :: ExIO FilePath

-- | Gets path to Hit configuration path (.hit/.hitconfig)
getPathToConfig :: ExIO FilePath

-- | Gets path to Hit references directory
getPathToRefs :: ExIO FilePath

-- | Gets path to Hit head file
getPathToHead :: ExIO FilePath


-- | A module that provides some base methods for commit timestamps
module Hit.Common.Time

-- | Returns the current time (with time zone) as timestamp string
getTimestamp :: ExIO HitTimestamp

-- | Converts the given timestamp string to linux timestamp (number of
--   seconds from unix epoch). If string is not in correct format returns
--   <a>Nothing</a>
timestampToInt :: HitTimestamp -> Maybe Int

-- | Converts the given timestamp string to pretty string date
--   representation used by log command. If string is not in correct format
--   returns <a>Nothing</a>
toPrettyUnixDate :: HitTimestamp -> Maybe String


-- | A module that defines Hit objects used in repository
module Hit.Objects

-- | Represents a type of Hit object
data HitObjectType
BlobType :: HitObjectType
TreeType :: HitObjectType
CommitType :: HitObjectType

-- | Tries to convert the given <a>String</a> into <a>HitObjectType</a>.
--   Returns <a>Nothing</a> if conversion fails
readHitObjectType :: String -> (Maybe HitObjectType)

-- | A class for all Hit objects (Blobs, Trees and Commits)
class HitObject a

-- | Returns size of the object
size :: HitObject a => a -> Int

-- | Returns object type
objectType :: HitObject a => a -> HitObjectType

-- | Returns object content as <a>String</a>
getContent :: HitObject a => a -> String

-- | Gets <a>Hash</a> associated with the current object
hashObject :: HitObject a => a -> Hash

-- | Compresses the current object and converts it to a <a>ByteString</a>
compressObject :: HitObject a => a -> ByteString

-- | Returns size of the object
size :: HitObject a => a -> Int

-- | Returns object type
objectType :: HitObject a => a -> HitObjectType

-- | Returns object content as <a>String</a>
getContent :: HitObject a => a -> String

-- | Gets <a>Hash</a> associated with the current object
hashObject :: HitObject a => a -> Hash

-- | Compresses the current object and converts it to a <a>ByteString</a>
compressObject :: HitObject a => a -> ByteString

-- | Represents a base Hit object associated with a single file.
data Blob
Blob :: String -> Blob

-- | Stores a file content
[fileContent] :: Blob -> String

-- | Represents an entry in directory (a file or subdirectory)
data DirectoryEntry
DirectoryEntry :: HitPermissions -> String -> Hash -> DirectoryEntry

-- | Gets permissions to the entry
[permissions] :: DirectoryEntry -> HitPermissions

-- | Gets name of the entry
[entryName] :: DirectoryEntry -> String

-- | Gets Hit hash of the entry
[entryHash] :: DirectoryEntry -> Hash

-- | Represents Hit object associated with a directory
data Tree
Tree :: [DirectoryEntry] -> Tree

-- | Gets list of <a>DirectoryEntry</a> that the object contains
[entries] :: Tree -> [DirectoryEntry]

-- | Represents an author of the commit
data CommitAuthor
CommitAuthor :: String -> Email -> CommitAuthor

-- | Gets the name of the author
[name] :: CommitAuthor -> String

-- | Gets an email of the author
[email] :: CommitAuthor -> Email

-- | This is a Hit object that stores information about how repository
--   looks like at the given point in time
data Commit
Commit :: Hash -> String -> CommitAuthor -> CommitAuthor -> HitTimestamp -> HitTimestamp -> [Hash] -> Commit

-- | Gets associated <a>Tree</a> object hash (for the main repository
--   directory)
[tree] :: Commit -> Hash

-- | Gets the message of the commit
[message] :: Commit -> String

-- | Gets the author of the commit
[author] :: Commit -> CommitAuthor

-- | Gets the committer of the commit
[committer] :: Commit -> CommitAuthor

-- | Gets the author timestamp (when commit is created)
[authorTimestamp] :: Commit -> HitTimestamp

-- | Gets the committer timestamp
[committerTimestamp] :: Commit -> HitTimestamp

-- | Gets list of parents for that commit
[parents] :: Commit -> [Hash]
instance GHC.Classes.Eq Hit.Objects.CommitAuthor
instance GHC.Classes.Eq Hit.Objects.HitObjectType
instance Hit.Objects.HitObject Hit.Objects.Commit
instance GHC.Show.Show Hit.Objects.CommitAuthor
instance Hit.Objects.HitObject Hit.Objects.Tree
instance GHC.Show.Show Hit.Objects.DirectoryEntry
instance Hit.Objects.HitObject Hit.Objects.Blob
instance GHC.Show.Show Hit.Objects.Blob
instance GHC.Show.Show Hit.Objects.HitObjectType


-- | A module that exposes functions that allow to operate on Hit
--   configuration (stored in .hit/.hitconfig file)
module Hit.Repository.General.Config

-- | Gets the config value for a given key. Returns Nothing if value for
--   given key does not exist
getFromConfig :: String -> ExIO (Maybe String)

-- | Saves a given key and value in Hit configuration
putToConfig :: String -> String -> ExIO ()

-- | Gets the config value for a given key. Returns empty <a>String</a> if
--   value for given key does not exist
defaultEmptyFromConfig :: String -> ExIO String


-- | A module that provides some base datatypes used in Hit repository
--   operations
module Hit.Repository.General.Data

-- | Represents a single entry in commits history
data LogEntry
LogEntry :: Hash -> CommitAuthor -> String -> String -> LogEntry
[commitHash] :: LogEntry -> Hash
[commitAuthor] :: LogEntry -> CommitAuthor
[commitDate] :: LogEntry -> String
[commitMessage] :: LogEntry -> String

-- | Represents a base change in repository
data MatchingEntry

-- | Given directory entries mathes (are the same)
Matching :: FilePath -> DirectoryEntry -> DirectoryEntry -> MatchingEntry

-- | Given directory entry is new
NewEntry :: FilePath -> DirectoryEntry -> MatchingEntry

-- | Given directory entry is removed
RemovedEntry :: FilePath -> DirectoryEntry -> MatchingEntry

-- | Represents a change made on file in repository
data Change

-- | The file is modified
Modified :: FilePath -> Change

-- | The file is newly added
New :: FilePath -> Change

-- | The file is removed
Removed :: FilePath -> Change

-- | Checks if the change is associated with new file
isNew :: Change -> Bool

-- | Checks if the change is associated with removed file
isRemoved :: Change -> Bool

-- | Checks if the change is associated with modified file
isModified :: Change -> Bool

-- | Gets the file path associated with that change
getPath :: Change -> FilePath

-- | Represents a merge conflict
data MergeConflict

-- | There is no file in merged branch version but it is on current branch
RemovedConflict :: FilePath -> MergeConflict

-- | The file has been modified on merged branch
ModifiedConflict :: FilePath -> MergeConflict
instance GHC.Classes.Eq Hit.Repository.General.Data.Change
instance GHC.Show.Show Hit.Repository.General.Data.MatchingEntry
instance GHC.Classes.Eq Hit.Repository.General.Data.LogEntry
instance GHC.Show.Show Hit.Repository.General.Data.MergeConflict
instance GHC.Show.Show Hit.Repository.General.Data.Change
instance GHC.Show.Show Hit.Repository.General.Data.LogEntry


-- | Provides method that list directory, but ignores entries not included
--   in Hit
module Hit.Repository.General.Ignore

-- | Gets content of the given directory, but ignores files and directories
--   not important to Hit
getNotIgnoredDirectoryEntries :: FilePath -> ExIO [FilePath]


-- | A module that exposes functions connected with Hit repository
module Hit.Repository.General.Initialization

-- | Initializes a new empty Hit repository in the current directory
initRepository :: ExIO ()

-- | Checks if the repository is initialized.
isInitialized :: ExIO Bool


-- | A module that provides a way to store and restore Hit objects to and
--   from files.
module Hit.Store

-- | Returns a path for the object with a given hash
getPathToObject :: Hash -> ExIO FilePath

-- | Stores a givent Hit object in a file
storeObject :: (HitObject a) => a -> ExIO ()

-- | Restores object type from the given file
getHitObjectType :: FilePath -> ExIO HitObjectType

-- | Restores <a>Blob</a> object from the given file
restoreBlob :: FilePath -> ExIO Blob

-- | Restores <a>Tree</a> object from the given file
restoreTree :: FilePath -> ExIO Tree

-- | Restores <a>Commit</a> object from the given file
restoreCommit :: FilePath -> ExIO Commit


-- | A module that provides functions to manage Hit references
module Hit.Repository.General.References

-- | Gets the current branch. Returns <a>Nothing</a> if repository is in
--   deteached head mode
getCurrentBranch :: ExIO (Maybe Branch)

-- | Checks if repository is in deteached head mode
isInDeteachedMode :: ExIO Bool

-- | Get commit from the given <a>Hash</a>
getCommitFromHash :: Hash -> ExIO Commit

-- | Gets tree from the given <a>Hash</a>
getTreeFromHash :: Hash -> ExIO Tree

-- | Gets last commit hash
getLastCommitHash :: ExIO Hash

-- | Gets <a>Tree</a> for current branch
getCurrentBranchVersion :: ExIO Tree

-- | Gets last commit for a given branch
getBranchCommitHash :: Branch -> ExIO Hash

-- | Write a given commit hash to a current branch
writeCommit :: Hash -> ExIO ()

-- | Writes a given commit hash like a commit in deteached head mode
writeCommitDeteachedHead :: Hash -> ExIO ()

-- | Finds full <a>Hash</a> for the given part if it is unique
getFullHash :: Hash -> ExIO Hash

-- | Gets <a>Tree</a> object associated with the given commit <a>Hash</a>
getVersion :: Hash -> ExIO Tree

-- | Gives information whether repository is in merge state (state after
--   merge with conflicts)
isInMergeState :: ExIO Bool

-- | Gets future merge commit parents from Merge file
getMergeParents :: ExIO [Hash]

-- | Sets future merge commit parents to Merge file
setMergeParents :: [Hash] -> ExIO ()


-- | A module that provides a method to get commit history
module Hit.Repository.Log

-- | Gets the given number of last commits in history for the current
--   branch
getLog :: Int -> ExIO [LogEntry]


-- | A module that provides basic operations on branches
module Hit.Repository.General.Branch

-- | Creates a new branch with the given name
createBranch :: Branch -> ExIO Bool

-- | Removes the branch with the given name if it is not current branch
removeBranch :: Branch -> ExIO Bool

-- | Checks whether current branch exists
doesBranchExist :: Branch -> ExIO Bool

-- | Checks if the given branch is current branch
isCurrentBranch :: Branch -> ExIO Bool

-- | Changes current branch to a given one
changeCurrentBranch :: Branch -> ExIO ()

-- | Returns all branches
listBranches :: ExIO [Branch]


-- | A module that provides helper methods to print varoius data
module Hit.Commands.Print

-- | Prints list of <a>Change</a>s
printChangesSmoothly :: [Change] -> ExIO ()

-- | Prints each <a>String</a> from the given list
printEachInLine :: [String] -> ExIO ()

-- | Gets <a>String</a> representation for diff result
showDiffOperation :: DiffOperation LineRange -> ExIO String

-- | Prints a list of <a>MergeConflicts</a>
printMergeConflicts :: [MergeConflict] -> ExIO ()


-- | A module that exports various usefull functions for operationg on
--   <a>Tree</a> object versions
module Hit.Repository.Directory

-- | Returns a list of entries in a given directory that are not ignored by
--   Hit
listDirectory :: FilePath -> ExIO [FilePath]

-- | Creates and returns a <a>Tree</a> object for the current directory
getTree :: FilePath -> Bool -> ExIO Tree

-- | Finds a <a>Blob</a> object corresponding with a given file in a given
--   tree.
findFileInTree :: FilePath -> Tree -> ExIO Blob

-- | Removes a given file from a repository
removeFileFromTree :: FilePath -> ExIO ()


-- | A module that provides method to compare versions of files from
--   various commits
module Hit.Repository.Diff

-- | Gets differences in the given file between versions from last commit
--   and working directory
getDiffFromCurrentVersion :: FilePath -> ExIO [DiffOperation LineRange]

-- | Gets differences in the given file between two given commits
getDiffBetweenCommits :: FilePath -> Hash -> Hash -> ExIO [DiffOperation LineRange]


-- | A module that provides way to create commits in repository
module Hit.Repository.Commit

-- | Creates a commit object with the given message and list of parents and
--   strores it in a repository
createCommitWithParents :: String -> [Hash] -> ExIO Commit

-- | Creates a commit with a given message and stores it in a repository
--   (commit parent will be last commit from current branch)
createCommit :: String -> ExIO Commit


-- | A module that is responsible for finding changes between various
--   repository versions
module Hit.Repository.Changes

-- | Gets a list of changes between two versions of directory
compareDirectoryTrees :: FilePath -> Tree -> Tree -> ExIO [Change]

-- | Gets a list of changes made in working directory since last commit
getRepositoryChanges :: ExIO [Change]

-- | Gets a list of changes made in working directory since last commit
getStatus :: ExIO [Change]

-- | Gets a list of changes between two <a>Tree</a> objects associated with
--   the given directory
compareTrees :: FilePath -> Tree -> Tree -> ExIO [Change]


-- | A module responsible for merging two branches
module Hit.Repository.Merge

-- | Merges a given branch version into the current branch. Returns a list
--   of merge conflits. If no conflicts merge commit is automatically
--   created otherwise repository is set to merge state
mergeBranch :: Branch -> ExIO [MergeConflict]


-- | Provides functions that change repository state between branches and
--   commits
module Hit.Repository.Checkout

-- | Changes repository state to be like in the given commit hash
makeHashCheckout :: Hash -> ExIO ()

-- | Changes the current branch and restores repository state to be exaclty
--   as in the last commit from the given branch
changeBranch :: Branch -> ExIO ()

-- | Changes repository state to be like in the given commit hash. This
--   sets repository to a deteached head mode
changeToCommit :: Hash -> ExIO ()


-- | A module that provides method for reseting changes made in working
--   directory
module Hit.Repository.Reset

-- | Resets state of a given file to the state from last commit
resetChangesInFile :: FilePath -> ExIO ()

-- | Resets all changes made in working directory since last commit
resetAllChanges :: ExIO ()


-- | A module that allows executing Hit commands
module Hit.Commands.Execution

-- | Executes a given command
executeHitCommand :: HitCommand -> ExIO ()
